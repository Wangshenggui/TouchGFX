/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x30, 0x33, 0x33, 0x31, 0x30, 0x37, 0x2e, 0x30, 0x30, 0x2c, 0x41, 0x2c, 0x32, 0x36, 0x32, 0x33, 0x2e, 0x30, 0x31, 0x34, 0x38, 0x35, 0x37, 0x39, 0x39, 0x2c, 0x4e, 0x2c, 0x31, 0x30, 0x36, 0x33, 0x36, 0x2e, 0x35, 0x31, 0x35, 0x31, 0x33, 0x39, 0x34, 0x35, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x39, 0x2c, 0x31, 0x37, 0x2e, 0x32, 0x2c, 0x32, 0x37, 0x30, 0x32, 0x32, 0x34, 0x2c, 0x32, 0x2e, 0x30, 0x2c, 0x57, 0x2c, 0x41, 0x2c, 0x43, 0x2a, 0x36, 0x44, 0x0, // @0 "$GNRMC,033107.00,A,2623.01485799,N,10636.51513945,E,0.009,17.2,270224,2.0,W,A,C*6D"
    0x43, 0x3a, 0x2, 0x25, 0x20, 0x2, 0x43, 0x0, // @83 "C:<>% <>C"
    0x62, 0x64, 0x30, 0x39, 0x4c, 0x61, 0x74, 0x20, 0x3a, 0x20, 0x2, 0x0, // @91 "bd09Lat : <>"
    0x62, 0x64, 0x30, 0x39, 0x4c, 0x6f, 0x6e, 0x20, 0x3a, 0x20, 0x2, 0x0, // @103 "bd09Lon : <>"
    0x2, 0xa, 0x2, 0x0, // @115 "<>\n<>"
    0x2, 0x3a, 0x2, 0x0, // @119 "<>:<>"
    0x5e72, 0x6270, 0x7535, 0x673a, 0xff1a, 0x2, 0x72, 0x70, 0x6d, 0x0, // @123 "?????<>rpm"
    0x76ae, 0x5e26, 0x7535, 0x673a, 0xff1a, 0x2, 0x72, 0x70, 0x6d, 0x0, // @133 "?????<>rpm"
    0x31, 0x32, 0x30, 0x2e, 0x32, 0x35, 0x33, 0x2e, 0x32, 0x32, 0x36, 0x2e, 0x39, 0x37, 0x0, // @143 "120.253.226.97"
    0x52, 0x54, 0x43, 0x4d, 0x33, 0x33, 0x5f, 0x47, 0x52, 0x43, 0x45, 0x70, 0x72, 0x6f, 0x0, // @158 "RTCM33_GRCEpro"
    0x70b9, 0x8ddd, 0x79bb, 0x20, 0x3a, 0x20, 0x2, 0x0, // @173 "??? : <>"
    0x98de, 0x884c, 0xff1a, 0x2, 0x6d, 0x2f, 0x73, 0x0, // @181 "???<>m/s"
    0x52, 0x54, 0x43, 0x4d, 0x33, 0x33, 0x5f, 0x47, 0x52, 0x43, 0x45, 0x4a, 0x0, // @189 "RTCM33_GRCEJ"
    0x5b9a, 0x4f4d, 0x20, 0x3a, 0x20, 0x2, 0x0, // @202 "?? : <>"
    0x65f6, 0x95f4, 0x20, 0x3a, 0x20, 0x2, 0x0, // @209 "?? : <>"
    0x901f, 0x5ea6, 0x20, 0x3a, 0x20, 0x2, 0x0, // @216 "?? : <>"
    0x34, 0x47, 0x914d, 0x7f6e, 0x4e2d, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x0, // @223 "4G???......"
    0x2, 0x53f7, 0x64ad, 0x79cd, 0x4ed3, 0x0, // @235 "<>????"
    0x4e, 0x74, 0x72, 0x69, 0x70, 0x670d, 0x52a1, 0x5668, 0x5730, 0x5740, 0xff1a, 0x0, // @241 "Ntrip??????"
    0x52, 0x54, 0x43, 0x4d, 0x33, 0x33, 0x5f, 0x47, 0x52, 0x43, 0x45, 0x0, // @253 "RTCM33_GRCE"
    0x66, 0x70, 0x73, 0x3a, 0x2, 0x0, // @265 "fps:<>"
    0x603b, 0x53f0, 0x6570, 0xff1a, 0x2, 0x0, // @271 "????<>"
    0x8ddd, 0x79bb, 0x3a, 0x20, 0x2, 0x0, // @277 "??: <>"
    0x31, 0x30, 0x36, 0x2e, 0x36, 0x31, 0x36, 0x31, 0x31, 0x33, 0x0, // @283 "106.616113"
    0x52, 0x54, 0x43, 0x4d, 0x33, 0x33, 0x5f, 0x47, 0x52, 0x43, 0x0, // @294 "RTCM33_GRC"
    0x6545, 0x969c, 0xff1a, 0x2, 0x0, // @305 "???<>"
    0x6587, 0x4ef6, 0xff1a, 0x2, 0x0, // @310 "???<>"
    0x6a21, 0x5f0f, 0x3a, 0x2, 0x0, // @315 "??:<>"
    0x6b63, 0x5e38, 0xff1a, 0x2, 0x0, // @320 "???<>"
    0x9ad8, 0x5ea6, 0xff1a, 0x2, 0x0, // @325 "???<>"
    0x32, 0x36, 0x2e, 0x33, 0x37, 0x36, 0x34, 0x30, 0x31, 0x0, // @330 "26.376401"
    0x46, 0x3a, 0x2, 0x0, // @340 "F:<>"
    0x52, 0x54, 0x43, 0x4d, 0x33, 0x30, 0x5f, 0x47, 0x52, 0x0, // @344 "RTCM30_GR"
    0x9519, 0x8bef, 0xff1a, 0x34, 0x47, 0x914d, 0x7f6e, 0x8d85, 0x65f6, 0x0, // @354 "???4G????"
    0x34, 0x47, 0x20, 0x20, 0x914d, 0x7f6e, 0x5de5, 0x5177, 0x0, // @364 "4G  ????"
    0x2, 0x5411, 0x0, // @373 "<>?"
    0x4e, 0x74, 0x72, 0x69, 0x70, 0x75, 0x7528, 0x6237, 0x0, // @376 "Ntripu??"
    0x4e, 0x74, 0x72, 0x69, 0x70, 0x670d, 0x52a1, 0x5668, 0x0, // @385 "Ntrip???"
    0x4e, 0x74, 0x72, 0x69, 0x70, 0x7528, 0x6237, 0x540d, 0x0, // @394 "Ntrip???"
    0x63, 0x65, 0x64, 0x72, 0x37, 0x31, 0x30, 0x37, 0x0, // @403 "cedr7107"
    0x66, 0x79, 0x78, 0x39, 0x39, 0x33, 0x34, 0x36, 0x0, // @412 "fyx99346"
    0x4e, 0x74, 0x72, 0x69, 0x70, 0x5bc6, 0x7801, 0x0, // @421 "Ntrip??"
    0x52, 0x54, 0x4b, 0x914d, 0x7f6e, 0x5de5, 0x5177, 0x0, // @429 "RTK????"
    0x57, 0x61, 0x69, 0x74, 0x2e, 0x2e, 0x2e, 0x0, // @437 "Wait..."
    0x65e0, 0x7ebf, 0x7535, 0x4e32, 0x53e3, 0x52a9, 0x624b, 0x0, // @445 "???????"
    0x786e, 0x5b9a, 0x6062, 0x590d, 0x8bbe, 0x7f6e, 0xff1f, 0x0, // @453 "???????"
    0x34, 0x47, 0x914d, 0x7f6e, 0x6210, 0x529f, 0x0, // @461 "4G????"
    0x44, 0x54, 0x55, 0x20, 0x49, 0x50, 0x0, // @468 "DTU IP"
    0x4ece, 0x5929, 0x7ebf, 0x4f4e, 0x529f, 0x8017, 0x0, // @475 "??????"
    0x5361, 0x49, 0x43, 0x43, 0x49, 0x44, 0x0, // @482 "?ICCID"
    0x53d1, 0x9001, 0x8bbe, 0x7f6e, 0x547d, 0x4ee4, 0x0, // @489 "??????"
    0x6587, 0x4ef6, 0x74, 0x65, 0x78, 0x74, 0x0, // @496 "??text"
    0x6c34, 0x7a3b, 0x76f4, 0x64ad, 0x7cfb, 0x7edf, 0x0, // @503 "??????"
    0x7981, 0x7528, 0x43, 0x4f, 0x4d, 0x31, 0x0, // @510 "??COM1"
    0x7981, 0x7528, 0x43, 0x4f, 0x4d, 0x32, 0x0, // @517 "??COM2"
    0x8bbe, 0x5907, 0x49, 0x4d, 0x45, 0x49, 0x0, // @524 "??IMEI"
    0x34, 0x47, 0x20, 0x914d, 0x7f6e, 0x0, // @531 "4G ??"
    0x44, 0x54, 0x55, 0x7248, 0x672c, 0x0, // @537 "DTU??"
    0x4e, 0x45, 0x53, 0x6e38, 0x620f, 0x0, // @543 "NES??"
    0x52, 0x54, 0x4b, 0x914d, 0x7f6e, 0x0, // @549 "RTK??"
    0x53, 0x49, 0x4d, 0x72b6, 0x6001, 0x0, // @555 "SIM??"
    0x55, 0x53, 0x42, 0x8fde, 0x63a5, 0x0, // @561 "USB??"
    0x542f, 0x7528, 0x42, 0x44, 0x53, 0x0, // @567 "??BDS"
    0x542f, 0x7528, 0x47, 0x41, 0x4c, 0x0, // @573 "??GAL"
    0x542f, 0x7528, 0x47, 0x4c, 0x4f, 0x0, // @579 "??GLO"
    0x542f, 0x7528, 0x47, 0x50, 0x53, 0x0, // @585 "??GPS"
    0x542f, 0x7528, 0x4ece, 0x5929, 0x7ebf, 0x0, // @591 "?????"
    0x7981, 0x7528, 0x42, 0x44, 0x53, 0x0, // @597 "??BDS"
    0x7981, 0x7528, 0x47, 0x41, 0x4c, 0x0, // @603 "??GAL"
    0x7981, 0x7528, 0x47, 0x4c, 0x4f, 0x0, // @609 "??GLO"
    0x7981, 0x7528, 0x47, 0x50, 0x53, 0x0, // @615 "??GPS"
    0x7981, 0x7528, 0x4ece, 0x5929, 0x7ebf, 0x0, // @621 "?????"
    0x31, 0x35, 0x34, 0x30, 0x0, // @627 "1540"
    0x32, 0x2e, 0x34, 0x6d, 0x0, // @632 "2.4m"
    0x32, 0x31, 0x30, 0x34, 0x0, // @637 "2104"
    0x38, 0x30, 0x30, 0x31, 0x0, // @642 "8001"
    0x4f4d, 0x7f6e, 0x68c0, 0x6d4b, 0x0, // @647 "????"
    0x4fdd, 0x5b58, 0x8bbe, 0x7f6e, 0x0, // @652 "????"
    0x4fe1, 0x53f7, 0x8d28, 0x91cf, 0x0, // @657 "????"
    0x5220, 0x9664, 0x6587, 0x4ef6, 0x0, // @662 "????"
    0x52a0, 0x8f7d, 0x5730, 0x56fe, 0x0, // @667 "????"
    0x542f, 0x7528, 0x536b, 0x661f, 0x0, // @672 "????"
    0x5728, 0x7ebf, 0x72b6, 0x6001, 0x0, // @677 "????"
    0x5de5, 0x4f5c, 0x8fdb, 0x7a0b, 0x0, // @682 "????"
    0x5df2, 0x914d, 0x53c2, 0x6570, 0x0, // @687 "????"
    0x6062, 0x590d, 0x8bbe, 0x7f6e, 0x0, // @692 "????"
    0x63a7, 0x5236, 0x6a21, 0x5f0f, 0x0, // @697 "????"
    0x6587, 0x4ef6, 0x6d4f, 0x89c8, 0x0, // @702 "????"
    0x6587, 0x4ef6, 0x7ba1, 0x7406, 0x0, // @707 "????"
    0x6587, 0x672c, 0x9884, 0x89c8, 0x0, // @712 "????"
    0x6c34, 0x7a3b, 0x76f4, 0x64ad, 0x0, // @717 "????"
    0x7981, 0x7528, 0x536b, 0x661f, 0x0, // @722 "????"
    0x7f51, 0x7edc, 0x6ce8, 0x518c, 0x0, // @727 "????"
    0x8ba1, 0x7b97, 0x8ddd, 0x79bb, 0x0, // @732 "????"
    0x8bb0, 0x5f55, 0x8be5, 0x70b9, 0x0, // @737 "????"
    0x8fd0, 0x884c, 0x72b6, 0x6001, 0x0, // @742 "????"
    0x97f3, 0x4e50, 0x64ad, 0x653e, 0x0, // @747 "????"
    0x31, 0x2e, 0x35, 0x0, // @752 "1.5"
    0x31, 0x32, 0x33, 0x0, // @756 "123"
    0x43, 0x4d, 0x44, 0x0, // @760 "CMD"
    0x6302, 0x8f7d, 0x70b9, 0x0, // @764 "???"
    0x7aef, 0x53e3, 0xff1a, 0x0, // @768 "???"
    0x31, 0x31, 0x0, // @772 "11"
    0x34, 0x35, 0x0, // @775 "45"
    0x35, 0x36, 0x0, // @778 "56"
    0x36, 0x30, 0x0, // @781 "60"
    0x39, 0x39, 0x0, // @784 "99"
    0x4f, 0x4b, 0x0, // @787 "OK"
    0x53d1, 0x9001, 0x0, // @790 "??"
    0x53d6, 0x6d88, 0x0, // @793 "??"
    0x6545, 0x969c, 0x0, // @796 "??"
    0x65ad, 0x5f00, 0x0, // @799 "??"
    0x67e5, 0x8be2, 0x0, // @802 "??"
    0x6b63, 0x53cd, 0x0, // @805 "??"
    0x786e, 0x5b9a, 0x0, // @808 "??"
    0x2a, 0x0, // @811 "*"
    0x2b, 0x0, // @813 "+"
    0x2d, 0x0, // @815 "-"
    0x2f, 0x0, // @817 "/"
    0x38, 0x0, // @819 "8"
    0x3a, 0x0, // @821 ":"
    0x40, 0x0, // @823 "@"
    0x51, 0x0, // @825 "Q"
    0x4e2d, 0x0, // @827 "?"
    0x4f60, 0x0 // @829 "?"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
